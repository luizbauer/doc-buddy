"""
This module provides an implementation of the AIProvider interface using the Vertex AI API.
"""

import os
import vertexai
from config import config
from vertexai.preview.generative_models import GenerativeModel
from .ai_provider import AIProvider


class VertexAIProvider(AIProvider):
    """
    An AIProvider implementation that uses the Vertex AI API to generate content.
    """

    def __init__(self):
        required_env_vars = {
            "GOOGLE_VERTEXAI_PROJECT": "Google Cloud project ID",
            "GOOGLE_VERTEXAI_LOCATION": "Vertex AI location",
        }

        missing_vars = [var for var in required_env_vars if var not in os.environ]
        if missing_vars:
            raise ValueError(
                f"Missing required environment variables: "
                f"{', '.join(f'{var} ({required_env_vars[var]})' for var in missing_vars)}"
            )

        project_id = os.environ["GOOGLE_VERTEXAI_PROJECT"]
        region = os.environ["GOOGLE_VERTEXAI_LOCATION"]
        vertexai.init(project=project_id, location=region)

        if not hasattr(self, "_model"):
            self._model = ""

    def document_file(self, file_name, project_path, file_contents):
        """
        Documents a file using the Google Vertexai API by providing the file path,
        file name, and its contents.

        Args:
            file_name (str): The name of the file to document.
            project_path (str): The project path where the file is located.
            file_contents (str): The contents of the file to be documented.

        Returns:
            str: The generated documentation for the file.

        """

        if self._model is None or self._model == "":
            self._model = GenerativeModel(config.model)

        prompt = self.generate_prompt(file_name, project_path, file_contents)

        try:
            response = self._model.generate_content([prompt])

            if not response.candidates:
                raise ValueError("No response generated by the model")

            return response.candidates[0].content.parts[0].text
        except Exception as e:
            raise RuntimeError(f"Failed to generate documentation: {str(e)}") from e

        return response.candidates[0].content.parts[0].text
